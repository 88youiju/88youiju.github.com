<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Net blog]]></title><description><![CDATA[hi]]></description><link>88youiju.github.com</link><image><url>88youiju.github.com/public/img/favorite.png</url><title>Net blog</title><link>88youiju.github.com</link></image><generator>NodeJS RSS Module</generator><lastBuildDate>Sat, 19 Jan 2013 04:54:38 GMT</lastBuildDate><atom:link href="88youiju.github.com/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[#Push the Limit of WiFi based Localization for Smartphones]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/c53425ebe2364d712cd0b48d9fbc10a9?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_57">Push the Limit of WiFi based Localization for Smartphones</h1>

<h3 id="toc_58">요약</h3>
<p>사용자와 기업을 위해 기반을 둔 새로운 위치기반(novel location)을 사용하려면 스마트폰의 Indoor localization의 높은 정확성은 매우 중요하다. 이 논문에서는, 우리의 목적을 위해 먼저 WIFI에 대한 현지화의 적합성에 대한 경험적 조사를 실시할 것 입니다. 우리는 합리적이고 정확도를 얻을 수 있었지만, 중요한 오류가 (예를 들어, 6-8m) 항상 존재하는 것을 발견했습니다. 이것의 원인은 다른 위치의 유사한 서명을 가진 존재들 때문인데 이것은 순수 WIFI의 기반 방법의 근본적인 한계입니다. 우리는 공공 장소에서의 스마트폰의 높은 밀도에 영감을 얻어, 중대한 오류를 제거 할수 있는 피어 지원 현지화(peer assisted localization) 접근 방식을 제안합니다.  </p><p>이것은 포함한다 정확한 음향 범위 견적 피어 전화간의 그 다음 맵에 표시한다 그들의 공동의 위치를 WIFI 서명 맵에 대한 그것은 제약범위를 기반으로 두고 </p><p>우리는 여려명의 폰 사이의 빠른 음향 범위에 대한 기술을 고안해 내고 프로토 타입을 만들 수 있습니다. 실험은 보여줬다 이거승ㄴ 줄일수 있다 최대 80%의 오류를 2미터와 1미터 사이에서는 &#39;오리지널 WIFI 스캐닝 시간 보다 길지도 않고 짧지도 않는 시간동안&#39; 그리고 배터리 수명에 대한 영향또한 무시할수 있는</p>]]></description><link>88youiju.github.com/post/number-push-the-limit-of-wifi-based-localization-for-smartphones</link><guid isPermaLink="false">number-push-the-limit-of-wifi-based-localization-for-smartphones</guid><dc:creator><![CDATA[<a href="" target="_blank">JuneHyuck Park</a>]]></dc:creator><pubDate>Sat, 19 Jan 2013 04:53:00 GMT</pubDate></item><item><title><![CDATA[Energy consumtion]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/c53425ebe2364d712cd0b48d9fbc10a9?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_43">power 측정</h1>
<p>Monsoon power monitor, Eprof, AppScope, PowerTutor, powertop  </p>
<ol>
<li><p>monsoon  </p>
<ul>
<li>매뉴얼, <a href="http://msoon.github.com/powermonitor/PowerTool/doc/Power%20Monitor%20Manual.pdf">http://msoon.github.com/powermonitor/PowerTool/doc/Power%20Monitor%20Manual.pdf</a></li>
</ul></li>
<li><p>Eprof</p>
<ul>
<li>Energy Profiler라는 명칭을 가진 이 Eprof는 마이크로스트사에서 만들었다고 하지만 관련 자료를 찾을수 없음</li>
<li>관련 논문<br>
Abhinav Pathak, Y. Charlie Hu, Ming Zhang, Where is the energy spent inside my app? Fine Grained Energy Accounting on Smartphones with Eprof</li>
</ul></li>
<li><p>AppScope</p>
<ul>
<li>연세대 차호정 교수 논문을 찾아 보았고 관련 프로그램을 다운 받음<br>
AppScope, <a href="http://css3.yonsei.ac.kr:5612/appscope/wiki/Downloads">http://css3.yonsei.ac.kr:5612/appscope/wiki/Downloads</a><br></li>
<li>AppScope는 현재 HTC Nexus One만을 지원함</li>
<li>PowerTutor의 한계점과 gps, audio의 정확성에 대한 점을 수정하려고 연세대에서 제작함<br>
procfs와 BatteryStat이라는 특수 파일 시스템만을 이용하여 하드웨어 컴포넌트들의 사용통계량을 계산하기때문에 정확성보장을 하지못함.
이것은 항상 폴링을 하고 있어야한다는 점과 이러한 특수파일들이 wifi와 GPS를 프로세스 단위로 제공하지 않아서 이러한 파일에 의존적으로밖에 
정보를 제공하지 못한다. 이러한 것들은 커널을 수정함으로써 극복할수는 있다. 
관련 논문으로는 AppScope: Application Energy Metering Framework for Android Smartphones using Kernel Activity Monitoring 이것을 참조 </li>
<li>관련 논문<br>
D. Kim, W. Jung, H. Cha, &quot;&#39;Runtime Power Estimation of Mobile AMOLED Displays,&quot;  2013 Design, Automation &amp; Test Europe (DATE&#39;13), Grenoble, France, March 2013, accepted<br>
W. Jung, C. Kang, C. Yoon, D. Kim and H. Cha, &quot; DevScope: A Nonintrusive and Online Power Analysis for Smartphone Hardware Components,&quot;  2012 International Conference on Hardware/Software Codesign and System Synthesis (CODES+ISSS&#39;12), Tampere, Finland, October 2012.<br>
C. Yoon, D. Kim, W. Jung, C. Kang, H. Cha, &quot; AppScope: Application Energy Metering Framework for Android Smartphone using Kernel Activity Monitoring,&quot;  2012 USENIX Annual Technical Conference (USENIX ATC&#39;12), Boston, MA, USA, June 2012.
W. Jung, D. Kim, H. Cha, &quot;Observing Thermal Characteristics of Energy-aware Mobile Devices,&quot;  2nd Workshop on Cyber-Physical Systems, Networks, and Applications (CPSNA&#39;12), Seoul, Korea, August 19, 2012, pp.465-468.<br>
S. Choi, B. Song, R. Ha, H. Cha, &quot;Energy-Aware Pipeline Monitoring System Using Piezoelectric Sensor&quot;, IEEE Sensors Jounal, Vol. 12, Issue. 6, June 2012, pp. 1695-1702.<br>
S. Choi, H. Hwang, B. Song, H. Cha, &quot;Hardware-assisted Energy Monitoring Architecture for Micro Sensor Nodes&quot;, Journal of Systems Architecture, Elsevier, Vol.58, Issue 2, February 2012, pp.73-85.<br>
J. Choi, H. Cha, &quot;System-Level Power Management for SoC-based Mobile Devices,&quot; IET Computers &amp; Digital Techniques, Volume 4, Issue 5, September 2010, pp. 400-409.<br>
J. Choi, H. Cha, &quot;A Processor Power Management Scheme for Handheld Systems Considering Off-chip Contributions,&quot;IEEE Transactions on Industrial Informatics, Volume 6, Number 3, August 2010, pp. 255-264.<br>
W. Jung, K. Kim, H. Cha, &quot;UserScope: A Fine-grained Kernel-level Framework for Monitoring Energy-related Smartphone User Contexts,&quot; 2012, submitted.</li>
</ul></li>
<li><p>PowerTutor</p>
<ul>
<li>핸드폰에 다운 받아서 실행해봄(wifi가 측정불가, 소스분석중)</li>
<li>오픈소스 다운받음, <a href="https://github.com/msg555/PowerTutor">https://github.com/msg555/PowerTutor</a><br>
공식홈페이지, <a href="http://ziyang.eecs.umich.edu/projects/powertutor/index.html">http://ziyang.eecs.umich.edu/projects/powertutor/index.html</a></li>
<li>대학교수들과 구글사의 엔지니어가 합작하여 개발자들을 위해 만듬</li>
<li>여러 논문자료에서 이것을 통해 에너지 측정을 함(심도있는 측정내용은 아니었음.)<br>
리건, Jin Xiao, 홍원기, 스마트폰을 위한 자동화된 어플리케이션 인지 배터리 관리 방안에 관한 연구 </li>
<li>PowerTutor를 이용해 관련 데이터를 꺼내 원하는 자료로 만들수 있음, <a href="http://stephendnicholas.com/archives/202">http://stephendnicholas.com/archives/202</a>
<img src="http://stephendnicholas.com/wp-content/uploads/2011/09/PT6.png" alt="&lt;Display Name&gt;">
<img src="http://stephendnicholas.com/wp-content/uploads/2011/09/PT8.png" alt="&lt;Display Name&gt;"></li>
<li>관련 논문<br>
A Framework for Application Energy Consumption analysis in Smart Phones</li>
</ul></li>
<li><p>Powertop</p>
<ul>
<li>공식홈페이지, <a href="https://01.org/powertop/">https://01.org/powertop/</a></li>
<li>Unix계열 pc에 대한 전력관리 툴</li>
<li>관련 프로그램을 받았고 이것을 핸드폰에 플래쉬하여 배터리를 측정할수 있다고함.</li>
<li>정확한 방법은 아직 찾지 못함.</li>
</ul></li>
<li><p>Powermeter, Trepn Profiler</p>
<ul>
<li>이것들은 다운 받아 실행했지만 원하는 기능이 없거나 아직 실행방법을 정확히 모름</li>
<li>Trepn Profiler, <a href="https://developer.qualcomm.com/mobile-development/development-devices/trepn-profiler">https://developer.qualcomm.com/mobile-development/development-devices/trepn-profiler</a></li>
</ul></li>
</ol>
]]></description><link>88youiju.github.com/post/energy-consumtion</link><guid isPermaLink="false">energy-consumtion</guid><dc:creator><![CDATA[<a href="" target="_blank">JuneHyuck Park</a>]]></dc:creator><pubDate>Sat, 19 Jan 2013 04:51:00 GMT</pubDate></item><item><title><![CDATA[iperf]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/c53425ebe2364d712cd0b48d9fbc10a9?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_50">iperf 환경구축 및 이슈처리</h1>

<h3 id="toc_51">Window</h3>
<p>iperf를 다운받은 후 iperf가 있는 폴더에서 cmd창에 iperf를 호출</p>
<h3 id="toc_52">Mac</h3>
<p>mac버전 iperf를 다운후 터미널을 연후 
맥용 바이너리(실행파일) 만드는 법  </p>
<ol>
<li>받은 소스 파일의 압축해제<br></li>
<li>디렉터리가 생성되면 터미널 실행 (유틸리티-&gt;터미널)<br></li>
<li>아래 명령어를 입력하여 컴파일 및 설치<br></li>
</ol>

<blockquote>
<p>cd ~/Downloads/iperf-2.0.5 (압축해제한 디렉터리로 이동해야 합니다)<br>
./configure<br>
make<br>
sudo make install (자기 계정의 패스워드 입력)<br>
sudo cd /usr/local/bin<br>
sudo mv iperf /usr/bin (자기 계정의 패스워드 입력)    </p></blockquote>
]]></description><link>88youiju.github.com/post/iperf</link><guid isPermaLink="false">iperf</guid><dc:creator><![CDATA[<a href="" target="_blank">JuneHyuck Park</a>]]></dc:creator><pubDate>Sat, 19 Jan 2013 04:48:00 GMT</pubDate></item><item><title><![CDATA[AppScope: Application Energy Metering Framework for Android Smartphones using Kernel Activity Monitoring]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/c53425ebe2364d712cd0b48d9fbc10a9?r=pg&s=48.jpg&d=identicon"><br/><h2 id="toc_34">AppScope: Application Energy Metering Framework for Android Smartphones using Kernel Activity Monitoring</h2>

<h3 id="toc_35">Abstract</h3>
<p>하드웨어와 시스템 소프트웨어 대한 이해의 부족으로 제한된 접근을 가져서 application의 에너저시 소모를 세밀하게 알려주는것에 한계가 있었다.이것의 문제는 의미있는 정보단위로 에너지 소모를 보여주게 될경우 정확도가 매우 낮아지는 문제를 가진다. 즉, 프로세스 단위, 스레드 단위, 서브루틴 단위로 보여지기 힘들다는 것이다.  </p><p>본 연구에서 AppScope을 제안한다. 이것은 안드로이드 시스템기반의 energy metering system이다. 이 시스템은 각 어플리케이션이 사용하는 커널 레벨의 하드웨어 usage를 monitor 한다. 그리고 정확도 높은 에너지 소모를 알려 준다.</p><p>AppScope은 커널 모듈로 구현 되어졌다. 그리고 이벤트 드리븐 모니터링 방법이기 때문에 low overhead 이며 high accuracy를 가진다. 측정결과 AppScope이 가지는 에너지 소모 오버해드는 35mW이고, CPU utilization overhead는 2.1%이다.</p>
<h3 id="toc_36">1. Introduction</h3>
<p>스마트폰 스스로가 전력을 manage 하기 위해서 스마트폰 에너지 소모 측정이 중요하다.
사용자들은 에너지 소모에 기반하여 합리적으로 어플리케이션을 선택할 수 있어야 한다.
또한 시스템 소프트웨어 개발자와 어플리케이션 개발자들 모두가 각각의 프로세스 또는 하드웨어 컴포넌트 단위의 에너지 소모에 관심있어 한다[1-5].</p><p> 하지만 전력 소모를 알아내는것은 어렵다. 스마트폰은 매우 다양한 하드웨어를 사용하며, 그 각각의 하드웨어는 모두 복잡한 구조를 가지고 있다. 또한 이러한 하드웨어들이 콤팩트하게 엮여 있기 때문에 더 어렵다.
결국, 정확도 높은 파워 모델을 생성하기 위해서는 하드웨어 컴포넌트별로 에너지 소모를 측정 해야 한다.</p><p> 이전연구[6-9]에서 various energy metering method를 실시 했었다. 하지만, 이러한 모델은 granularity와 accuracy가 부족 했다. 하나의 예로 이전연구[6] PowerScope의 경우 application들의 에너지 소모를 fine-grained level로 제공 한다. 그러나 이것은 external device를 이용한 post-processing을 요구한다. 또한 개발자들은 에너지 Metering을 위해서 import related APIs해야 한다.
PowerTutor의 경우도 하드웨어 컴포넌트별 에너지 소모는 나타내 주지만 각각의 어플리케이션별로 또는 프로세스별로 정확한 에너지 소모를 제공해 주지 않는다.
PowerProf[9]의 경우 각각의 어플리케이션을 위한 API usage 정보를 요구한다. 에너지 소모를 추정하기 위해서
위에서 언급한 이러한 전력 모델들은 오직 정확도에 초점을 맞추었다. 하지만 그들은 모두 하드웨어의 actual usage에 대해서는 고려하지 않았다.
결국, 정확한 에너지 추정이란 정확한 전력모델도 중요하고 정확한 하드웨어별 usage statistics가 있어야 한다.
특히 이 heardware usage는 전력소모 추정을 위한 필요조건이기 때문에 더더욱 중요하다.</p><p>  이러한 Hardware Usage를 파악하는 일은 이전에 hardware performance counter(HPC)에 의해서 완성되어진 연구이다[5,10-13]. 소프트웨어 performnace counter(SPC) such as the Linux procfs/sysfs[7,14-16],or BatteryStats, which is provided by Android[8,17].
하지만, 이러한 방법들은 프로세스와 하드웨어에 의존적이며 서로 다른 정보를 제공하게 된다.
따라서 정확한 사용 통계를 각각의 하드웨어 컴포넌트를 위해서 획득하기에는 제한성을 가진다.</p><p>  본 연구에서는, AppScope이라고 부르는 software scheme을 제안한다. 이것은 Android kernel 을 마이크로 스코픽 레벨로 모니터링하는 개념이다. 이렇게해서 각각의 Application의 usage statics를 계산한다. 이를 통해서 시스템 콜을 trace하며, android binder를 trace한다.
AppScope은 Event-driven 접근 방식으로 app usage를 수집한다. 그렇기 때문에 application 수준에서 fine-grained level로 추정이 가능 하다.
또한 우리의 방법은 어떤 안드로이드 디바이스를 위해서도 시스템 소프트웨어의 수정없이 적용이 가능하다. 왜냐하면 우리는 리눅스 커널의 다이나믹 모듈을 이용 했기 때문이다.</p>
<blockquote>
<h3 id="toc_37">The contributions of our work are as follows:</h3>

<ul>
<li>AppScope은 안드로이드 어플리케이션을 위해서 자동으로 에너지 소모를 제공 한다.  시스템소프트웨어를 커스터마이즈하고 하드웨어 컴포넌트들을 커스터마이즈해서</li>
<li>AppScope은 정확한 추정을 한다. 리얼 타임에, hardware usage를 mcrioscopic level로 제공 한다.</li>
<li>우리의 방법이 이식성을 높이기 위해서 kernel module로 개발 했다. 따라서 안드로이드 디바이스<br></li>
</ul>
</blockquote>

<h3 id="toc_38">2. Backgrounds</h3>
<p>  파워 모델은 하드웨어 컴포넌트에 의존적이며
이러한 하드웨어 컴포넌트들은 전통적으로 non-linear regression model 또는 linear regresion 모델로 만들어 졌다.                            </p><p>  non-linear power model들도 종종 hardware component들에 대해서 종속적인 모습을 보였다. 비록 그것들이 충분히 linear model들을 성능적인 측면에서 능가하지 못하지만 말이다[18]. 우리는 따라서 무조건 linear model들로 구성 되어진다. 우리의 linear model들을 이용하면 하나의 디바이스에 대한 전력 소모 P는 아래의 expression을 따른다.</p>]]></description><link>88youiju.github.com/post/appscope-application-energy-metering-framework-for-android-smartphones-using-kernel-activity-monitoring</link><guid isPermaLink="false">appscope-application-energy-metering-framework-for-android-smartphones-using-kernel-activity-monitoring</guid><dc:creator><![CDATA[<a href="" target="_blank">JuneHyuck Park</a>]]></dc:creator><pubDate>Sat, 19 Jan 2013 04:11:00 GMT</pubDate></item><item><title><![CDATA[Batterymanager 요약]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/c53425ebe2364d712cd0b48d9fbc10a9?r=pg&s=48.jpg&d=identicon"><br/><h2 id="toc_41">batterymanager 요약</h2>
<p>안드로이드가 배터리 정보를 얻기 위해서 Intent.ACTION<em>BATTERY</em>CHANGED의 intent 필터를 이용해서 정보값을 받아와서 표시한다. onReceive매소드를 이용해서 배터리 정보를 받는다. 이 intent는 배터리에 대한 유용한 정보를 포함한다. </p>
<table><thead>
<tr>
<th>constant</th>
<th></th>
<th></th>
</tr>
</thead><tbody>
<tr>
<td>String</td>
<td>EXTRA_HEALTH</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code>  : integer containing the current health constant.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_ICON _SMALL</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : integer containing the resource ID of a small status bar icon indicating the current battery state.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_LEVEL</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : integer field containing the current battery level, from 0 to EXTRA_SCALE.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_PLUGGED</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : integer indicating whether the device is plugged in to a power source; 0 means it is on battery, other constants are different types of power sources.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_PRESENT</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : boolean indicating whether a battery is present.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_SCALE</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : integer containing the maximum battery level.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_STATUS</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : integer containing the current status constant.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_TECHNOLOGY</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : String describing the technology of the current battery.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_TEMPERATURE</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : integer containing the current battery temperature.</td>
</tr>
<tr>
<td>String</td>
<td>EXTRA_VOLTAGE</td>
<td>Extra for <code>ACTION_BATTERY_CHANGED</code> : integer containing the current battery voltage level.</td>
</tr>
</tbody></table>
]]></description><link>88youiju.github.com/post/batterymanager-yoyag</link><guid isPermaLink="false">batterymanager-yoyag</guid><dc:creator><![CDATA[<a href="" target="_blank">JuneHyuck Park</a>]]></dc:creator><pubDate>Sat, 19 Jan 2013 03:56:00 GMT</pubDate></item></channel></rss>